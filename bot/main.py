import asyncio
import logging
import sys
import json
from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, Chat
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramBadRequest

from config import BOT_TOKEN
from database import db
from states import AdminSetup, ChannelSetup, SubmissionStates
from keyboards import (
    get_main_menu_kb,
    get_admin_panel_kb,
    get_forward_choice_kb,
    get_admin_decision_kb,
    get_cancel_kb,
    get_back_to_main_kb
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()


# ============= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =============

async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    admin_id = await db.get_admin_id()
    return admin_id == user_id


async def get_user_info(user_id: int) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        chat = await bot.get_chat(user_id)
        return {
            'id': chat.id,
            'username': chat.username,
            'first_name': chat.first_name,
            'full_name': chat.full_name
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
        return None


async def copy_message_to_channel(
    message: Message,
    channel_id: int,
    from_user_id: int = None
):
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª"""
    try:
        if from_user_id:
            # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await bot.forward_message(
                chat_id=channel_id,
                from_chat_id=message.chat.id,
                message_id=message.message_id
            )
        else:
            # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –∞–≤—Ç–æ—Ä–∞
            await bot.copy_message(
                chat_id=channel_id,
                from_chat_id=message.chat.id,
                message_id=message.message_id
            )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
        return False


# ============= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =============

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    await db.add_user(user_id, username, first_name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    admin_id = await db.get_admin_id()
    
    if not admin_id:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_code = await db.get_setting('admin_code')
        if not admin_code:
            admin_code = await db.generate_admin_code()
            print(f"\n{'='*50}")
            print(f"üîê –ö–û–î –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê: {admin_code}")
            print(f"{'='*50}\n")
        
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏:",
            reply_markup=get_cancel_kb()
        )
        await state.set_state(AdminSetup.waiting_for_code)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
    if await db.is_user_banned(user_id):
        await message.answer("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    
    admin = await is_admin(user_id)
    
    welcome_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!\n\n"
    
    if admin:
        channel_id = await db.get_channel_id()
        if channel_id:
            welcome_text += "‚úÖ –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞.\n"
            welcome_text += "üì¢ –ö–∞–Ω–∞–ª –ø–æ–¥–∫–ª—é—á–µ–Ω.\n\n"
        else:
            welcome_text += "‚úÖ –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞.\n"
            welcome_text += "‚ö†Ô∏è –ö–∞–Ω–∞–ª –µ—â—ë –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.\n\n"
        welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        stats = await db.get_user_stats(user_id)
        welcome_text += (
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {stats['total']}\n"
            f"‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: {stats['approved']}\n"
            f"‚Ä¢ –û–∂–∏–¥–∞–µ—Ç: {stats['pending']}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
    
    await message.answer(
        welcome_text,
        reply_markup=get_main_menu_kb(admin)
    )


@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    pending_count = await db.get_pending_submissions_count()
    
    await message.answer(
        "‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        f"üì¨ –û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫: {pending_count}",
        reply_markup=get_admin_panel_kb(pending_count),
        parse_mode="HTML"
    )


# ============= –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê =============

@router.message(AdminSetup.waiting_for_code)
async def process_admin_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    code = message.text.strip().upper()
    correct_code = await db.get_setting('admin_code')
    
    if code == correct_code:
        await db.set_admin(message.from_user.id)
        await message.answer(
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n\n"
            "–¢–µ–ø–µ—Ä—å –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É –∏–ª–∏ –¥–æ–±–∞–≤–∏–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup_channel –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞.",
            reply_markup=get_main_menu_kb(True)
        )
        await state.clear()
        logger.info(f"–ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {message.from_user.id} (@{message.from_user.username})")
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
            reply_markup=get_cancel_kb()
        )


# ============= –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò –ö–ê–ù–ê–õ–ê =============

@router.message(Command("setup_channel"))
async def cmd_setup_channel(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞"""
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∫–∞–Ω–∞–ª.")
        return
    
    await message.answer(
        "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "1. –ò–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (https://t.me/...)\n"
        "2. Username –∫–∞–Ω–∞–ª–∞ (@channel)\n"
        "3. ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890)\n\n"
        "‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –ø—Ä–∞–≤–æ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!",
        reply_markup=get_cancel_kb()
    )
    await state.set_state(ChannelSetup.waiting_for_invite)


@router.message(ChannelSetup.waiting_for_invite)
async def process_channel_invite(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏ –∫–∞–Ω–∞–ª–∞"""
    text = message.text.strip()
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    channel_id = None
    
    try:
        # –í–∞—Ä–∏–∞–Ω—Ç 1: ID –∫–∞–Ω–∞–ª–∞
        if text.startswith('-'):
            channel_id = int(text)
        # –í–∞—Ä–∏–∞–Ω—Ç 2: Username
        elif text.startswith('@'):
            channel_id = text
        # –í–∞—Ä–∏–∞–Ω—Ç 3: –°—Å—ã–ª–∫–∞
        elif 't.me/' in text:
            username = text.split('t.me/')[-1].split('?')[0]
            channel_id = f"@{username}" if not username.startswith('@') else username
        else:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É, username –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞.",
                reply_markup=get_cancel_kb()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
        try:
            chat = await bot.get_chat(channel_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–∞–Ω–∞–ª
            if chat.type != 'channel':
                await message.answer(
                    "‚ùå –≠—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.",
                    reply_markup=get_cancel_kb()
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
            bot_member = await bot.get_chat_member(chat.id, bot.id)
            if bot_member.status not in ['administrator', 'creator']:
                await message.answer(
                    "‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞.\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–æ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π!",
                    reply_markup=get_cancel_kb()
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–∞–ª
            await db.set_channel_id(chat.id)
            
            await message.answer(
                f"‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!\n\n"
                f"üì¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
                f"üÜî ID: {chat.id}\n\n"
                f"–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!",
                reply_markup=get_main_menu_kb(True)
            )
            await state.clear()
            logger.info(f"–ö–∞–Ω–∞–ª –ø–æ–¥–∫–ª—é—á–µ–Ω: {chat.title} (ID: {chat.id})")
            
        except TelegramBadRequest as e:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É.\n"
                f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                f"1. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª\n"
                f"2. –ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
                f"3. –£ –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
                f"–û—à–∏–±–∫–∞: {e}",
                reply_markup=get_cancel_kb()
            )
    
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞.",
            reply_markup=get_cancel_kb()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}",
            reply_markup=get_cancel_kb()
        )


# ============= –û–ë–†–ê–ë–û–¢–ö–ê –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô =============

@router.callback_query(F.data == "submit_news")
async def start_submission(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
    if await db.is_user_banned(callback.from_user.id):
        await callback.message.edit_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∫–∞–Ω–∞–ª
    channel_id = await db.get_channel_id()
    if not channel_id:
        await callback.message.edit_text(
            "‚ùå –ö–∞–Ω–∞–ª –µ—â—ë –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_back_to_main_kb()
        )
        return
    
    await callback.message.edit_text(
        "üìù <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç\n"
        "‚Ä¢ –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é\n"
        "‚Ä¢ –í–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é\n"
        "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç\n\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å, —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏.",
        reply_markup=get_cancel_kb(),
        parse_mode="HTML"
    )
    await state.set_state(SubmissionStates.waiting_for_content)


@router.message(SubmissionStates.waiting_for_content)
async def process_submission_content(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.update_data(
        message_id=message.message_id,
        content_type=message.content_type,
        chat_id=message.chat.id
    )
    
    await message.answer(
        "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
        reply_markup=get_forward_choice_kb()
    )
    await state.set_state(SubmissionStates.waiting_for_forward_choice)


@router.callback_query(SubmissionStates.waiting_for_forward_choice, F.data.startswith("allow_forward_"))
async def process_forward_choice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏"""
    await callback.answer()
    
    choice = callback.data.split("_")[-1]
    allow_forward = choice == "yes"
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    message_id = data.get('message_id')
    content_type = data.get('content_type')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –±–∞–∑—É
    submission_id = await db.add_submission(
        user_id=callback.from_user.id,
        message_id=message_id,
        content_type=content_type,
        content=json.dumps({'chat_id': callback.from_user.id}),
        allow_forward=allow_forward
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.message.edit_text(
        "‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ç —Ä–µ—à–µ–Ω–∏–µ.",
        reply_markup=get_back_to_main_kb()
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_id = await db.get_admin_id()
    if admin_id:
        user_info = await get_user_info(callback.from_user.id)
        user_name = f"{user_info['first_name']}"
        if user_info.get('username'):
            user_name += f" (@{user_info['username']})"
        
        forward_status = "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å –∞–≤—Ç–æ—Ä–æ–º" if allow_forward else "üîí –¢–æ–ª—å–∫–æ –∞–Ω–æ–Ω–∏–º–Ω–æ"
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        try:
            await bot.copy_message(
                chat_id=admin_id,
                from_chat_id=callback.from_user.id,
                message_id=message_id,
                caption=f"üì¨ <b>–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{submission_id}</b>\n\n"
                        f"üë§ –û—Ç: {user_name}\n"
                        f"üîê {forward_status}\n\n"
                        f"{callback.message.caption or ''}",
                parse_mode="HTML",
                reply_markup=get_admin_decision_kb(submission_id, allow_forward)
            )
            
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ caption, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            if not callback.message.caption and content_type == 'text':
                await bot.send_message(
                    chat_id=admin_id,
                    text=f"üì¨ <b>–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{submission_id}</b>\n\n"
                         f"üë§ –û—Ç: {user_name}\n"
                         f"üîê {forward_status}",
                    parse_mode="HTML",
                    reply_markup=get_admin_decision_kb(submission_id, allow_forward)
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
    
    await state.clear()


# ============= –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–®–ï–ù–ò–ô –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê =============

@router.callback_query(F.data.startswith("approve_"))
async def approve_submission(callback: CallbackQuery):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    await callback.answer()
    
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    parts = callback.data.split("_")
    publish_type = parts[1]  # with-author –∏–ª–∏ anonymous
    submission_id = int(parts[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    submission = await db.get_submission(submission_id)
    if not submission:
        await callback.message.edit_text("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    if submission['status'] != 'pending':
        await callback.message.edit_text(f"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (—Å—Ç–∞—Ç—É—Å: {submission['status']}).")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–∞
    channel_id = await db.get_channel_id()
    if not channel_id:
        await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!", show_alert=True)
        return
    
    # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
    try:
        content_data = json.loads(submission['content'])
        user_chat_id = content_data['chat_id']
        
        if publish_type == 'with' and submission['allow_forward']:
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å –∞–≤—Ç–æ—Ä–æ–º (–ø–µ—Ä–µ—Å—ã–ª–∫–∞)
            await bot.forward_message(
                chat_id=channel_id,
                from_chat_id=user_chat_id,
                message_id=submission['message_id']
            )
            decision_text = "–ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–≤—Ç–æ—Ä—Å—Ç–≤–∞"
        else:
            # –ê–Ω–æ–Ω–∏–º–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è (–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ)
            await bot.copy_message(
                chat_id=channel_id,
                from_chat_id=user_chat_id,
                message_id=submission['message_id']
            )
            decision_text = "–∞–Ω–æ–Ω–∏–º–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await db.update_submission_status(submission_id, 'approved', decision_text)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.send_message(
                chat_id=submission['user_id'],
                text=f"‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{submission_id} –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å {decision_text}!",
                reply_markup=get_back_to_main_kb()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await callback.message.edit_caption(
            caption=f"{callback.message.caption}\n\n‚úÖ <b>–û–î–û–ë–†–ï–ù–û</b> ({decision_text})",
            parse_mode="HTML"
        )
        
        logger.info(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{submission_id} –æ–¥–æ–±—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}", show_alert=True)


@router.callback_query(F.data.startswith("reject_"))
async def reject_submission(callback: CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    await callback.answer()
    
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    
    submission_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    submission = await db.get_submission(submission_id)
    if not submission:
        await callback.message.edit_text("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    if submission['status'] != 'pending':
        await callback.message.edit_text(f"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (—Å—Ç–∞—Ç—É—Å: {submission['status']}).")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await db.update_submission_status(submission_id, 'rejected', '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.send_message(
            chat_id=submission['user_id'],
            text=f"‚ùå –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{submission_id} –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.",
            reply_markup=get_back_to_main_kb()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        await callback.message.edit_caption(
            caption=f"{callback.message.caption}\n\n‚ùå <b>–û–¢–ö–õ–û–ù–ï–ù–û</b>",
            parse_mode="HTML"
        )
    except:
        await callback.message.edit_text(
            text=f"{callback.message.text}\n\n‚ùå <b>–û–¢–ö–õ–û–ù–ï–ù–û</b>",
            parse_mode="HTML"
        )
    
    logger.info(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{submission_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")


# ============= –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–û –ú–ï–ù–Æ =============

@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer()
    await state.clear()
    
    admin = await is_admin(callback.from_user.id)
    stats = await db.get_user_stats(callback.from_user.id)
    
    if admin:
        channel_id = await db.get_channel_id()
        text = "‚öôÔ∏è <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        text += "‚úÖ –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞.\n"
        if channel_id:
            text += "üì¢ –ö–∞–Ω–∞–ª –ø–æ–¥–∫–ª—é—á–µ–Ω.\n"
        else:
            text += "‚ö†Ô∏è –ö–∞–Ω–∞–ª –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.\n"
    else:
        text = (
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {stats['total']}\n"
            f"‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: {stats['approved']}\n"
            f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['rejected']}\n"
            f"‚Ä¢ –û–∂–∏–¥–∞–µ—Ç: {stats['pending']}\n"
        )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_main_menu_kb(admin),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_panel")
async def show_admin_panel(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    await callback.answer()
    
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    
    pending_count = await db.get_pending_submissions_count()
    
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        f"üì¨ –û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫: {pending_count}",
        reply_markup=get_admin_panel_kb(pending_count),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "change_channel")
async def change_channel(callback: CallbackQuery, state: FSMContext):
    """–°–º–µ–Ω–∞ –∫–∞–Ω–∞–ª–∞"""
    await callback.answer()
    
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "1. –ò–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª\n"
        "2. Username –∫–∞–Ω–∞–ª–∞ (@channel)\n"
        "3. ID –∫–∞–Ω–∞–ª–∞\n\n"
        "‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
        reply_markup=get_cancel_kb()
    )
    await state.set_state(ChannelSetup.waiting_for_invite)


@router.callback_query(F.data == "my_stats")
async def show_my_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer()
    
    stats = await db.get_user_stats(callback.from_user.id)
    
    text = (
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {stats['total']}\n"
        f"‚Ä¢ ‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {stats['approved']}\n"
        f"‚Ä¢ ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['rejected']}\n"
        f"‚Ä¢ ‚è≥ –û–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {stats['pending']}\n"
    )
    
    if stats['total'] > 0:
        approval_rate = (stats['approved'] / stats['total']) * 100
        text += f"\nüìà –ü—Ä–æ—Ü–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: {approval_rate:.1f}%"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_to_main_kb(),
        parse_mode="HTML"
    )


@router.callback_query(F.data.in_({"cancel", "cancel_submission"}))
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    await callback.answer()
    await state.clear()
    
    admin = await is_admin(callback.from_user.id)
    
    await callback.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_menu_kb(admin)
    )


# ============= –ó–ê–ü–£–°–ö –ë–û–¢–ê =============

async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    await db.connect()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_id = await db.get_admin_id()
    if not admin_id:
        code = await db.get_setting('admin_code')
        if not code:
            code = await db.generate_admin_code()
        print(f"\n{'='*50}")
        print(f"üîê –ö–û–î –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê: {code}")
        print(f"{'='*50}\n")
    else:
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {admin_id}")
        channel_id = await db.get_channel_id()
        if channel_id:
            logger.info(f"–ö–∞–Ω–∞–ª –ø–æ–¥–∫–ª—é—á–µ–Ω: {channel_id}")


async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    await db.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    dp.include_router(router)
    
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
